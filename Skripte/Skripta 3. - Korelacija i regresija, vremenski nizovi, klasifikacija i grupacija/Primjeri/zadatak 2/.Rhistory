exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
exp(coef(model1))  # izrazeno kao omjer vjerojatnos
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(1) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123456) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
p1 <- predict(model1, newdata = test, type = "response")
head(p1)
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
sqrt(0.48194485  )
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
sqrt(1.6192204763 )
1.6192204763*1.6192204763
exp(1.6192204763 )
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
p1 <- predict(model1, newdata = test, type = "response")
head(p1)
y1 <- ifelse(p1 > 0.5, 1, 0)
head(y1)
y1 <- factor(y1, levels = c(0,1), labels = c("B", "M"))
head(y1)
table("predicted" = y1, "actual" = test$class)
accuracy <- (129+71) / (129+5+5+71)
accuracy #0.952381
accuracy <- (129+71) / (129+5+5+71)
accuracy #0.952381
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
p1 <- predict(model1, newdata = test, type = "response")
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(1) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
# 1. ucitavanje podataka:
# u opisu podataka navedeno je da ima nedostajucih vrijednosti
# pregledom podataka vidljivo je da su one oznacene upitnikom ("?")
# prilikom ucitavanja podataka potrebno je navesti sto se sve smatra nedostajucom vrijednoscu
bc <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data", sep = ",", na.strings = c("?"))
# 2.
str(bc)
# 699 instanci, 11 varijabli
# sve varijable su numericke
# 3. dodavanje naziva stupaca (skraceni nazivi)
names.new <- c("id", "clump", "unifsize", "unifshape", "adhesion", "epithel", "nuclei",
"chromatin", "nucleoli", "mitose", "class")
names(bc) <- names.new
bc <- bc[,-1]
str(bc)
#4. koliko ima nedostajucih vrijednosti
# ukupno
sum(is.na(bc)) #16
table(is.na(bc))
# po svakoj varijabli
sapply(bc, function(x) sum(is.na(x)))
# samo nuclei ima nedostajuce vrijednosti
# koliko ima redaka bez nedostajucih vrijednosti
sum(complete.cases(bc)) #683/699
#5. zamjena nedostajucih vrijednosti medijanom
nuclei.median <- median(bc[,"nuclei"], na.rm = TRUE)
nuclei.median #1
bc[is.na(bc$nuclei) ,"nuclei"] <- nuclei.median
sum(is.na(bc$nuclei)) #nema vise nedostajucih vrijednosti
#6. "class" - pretvaranje u kategoricku
unique(bc$class) # postojeci modaliteti
bc$class <- factor(bc$class, levels = c("2", "4"), labels = c("B", "M"))
str(bc)
#7. podjela podataka
set.seed(123) # vazno zbog mogucnosti ponavljanja odabira
idx <- sample(nrow(bc), nrow(bc)*0.7) #sto izvlacimo (1:699), koliko puta 699*0,7 = 489
train <- bc[idx, ]
test <- bc[-idx, ]
#8.
round(prop.table(table(train$class)), 3)
round(prop.table(table(test$class)), 3)
round(prop.table(table(bc$class)), 3) # cijeli skup
############# logisticka regresija
#9.
model1 <- glm(class~., data = train, family = binomial(link = "logit"))
#10.
summary(model1)
coef(model1) # izrazeno u logaritmu omjera vjerojatnosti (log odds)
# clump = 0.6805
exp(coef(model1))  # izrazeno kao omjer vjerojatnosti (odds)
# ako se zeli rezultat izrazen kao vjerojatnost, potrebno je navesti: type = "response"
# u protivnome rezultat je izrazen kao logaritam omjera vjerojatnosti (log odds)
p1 <- predict(model1, newdata = test, type = "response")
head(p1)
# klasifikacija
y1 <- ifelse(p1 > 0.5, 1, 0)
head(y1)
y1 <- factor(y1, levels = c(0,1), labels = c("B", "M"))
head(y1)
#12. konfuzijska matrica
table("predicted" = y1, "actual" = test$class)
accuracy <- (129+71) / (129+5+5+71)
accuracy #0.952381
#13. automatski odabir modela
s <- step(model1)
s$formula
#class ~ clump + adhesion + nuclei + chromatin + nucleoli + mitose
# ako se zeli izvrsiti odabir modela postepenim dodavanjem varijabli (pocevsi od modela bez varijabli)
# odnosno postepenim uklanjanjem varijabli (pocevsi od potpunog modela):
# model bez varijabli
null.model <- glm(class~1, data = train, family = binomial)
# model sa svim varijablama
full.model <- glm(class~., data = train, family = binomial)
# postepeno dodavanje:
forward <- step(null.model, scope = list(lower = null.model, upper = full.model), direction = "forward")
forward$formula
#class ~ nuclei + unifsize + clump + nucleoli + mitose + adhesion +
# chromatin
# postepeno uklanjanje:
backward <- step(full.model, scope = list(lower = null.model, upper = full.model), direction = "backward")
backward$formula
#class ~ clump + adhesion + nuclei + chromatin + nucleoli + mitose
# dodavanje i uklanjanje:
both <- step(null.model, scope = list(lower = null.model, upper = full.model), direction = "both")
both$formula
#class ~ nuclei + clump + nucleoli + mitose + adhesion + chromatin
s$formula
# model bez varijabli
null.model <- glm(class~1, data = train, family = binomial)
# model sa svim varijablama
full.model <- glm(class~., data = train, family = binomial)
forward <- step(null.model, scope = list(lower = null.model, upper = full.model), direction = "forward")
forward$formula
#class ~ nuclei + unifsize + clump + nucleoli + mitose + adhesion +
# chromatin
backward <- step(full.model, scope = list(lower = null.model, upper = full.model), direction = "backward")
backward$formula
#class ~ clump + adhesion + nuclei + chromatin + nucleoli + mitose
