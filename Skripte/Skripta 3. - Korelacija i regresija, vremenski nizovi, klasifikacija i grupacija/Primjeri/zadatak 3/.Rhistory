lcolor = "gray80",
color = c("#FF6B6B", "#4CAF50", "#2196F3")[as.numeric(iris$Species)],
bg = rev(c("#FFCDD2", "#C8E6C9", "#BBDEFB"))[as.numeric(iris$Species)],)
dotchart(iris$Sepal.Length,
main= "Dužina čašičnih listova",
groups = iris$Species,
gcolor = c("#FF6B6B", "#4CAF50", "#2196F3"),
lcolor = "gray80",
color = c("#FF6B6B", "#4CAF50", "#2196F3")[as.numeric(iris$Species)],
bg = rev(c("#FFCDD2", "#C8E6C9", "#BBDEFB"))[as.numeric(iris$Species)],)
data(ChickWeight)
force(ChickWeight)
View(ChickWeight)
mean_weight <- aggregate(weight ~ Diet, ChickWeight, mean)
mean_weight
barplot(mean_weight$weight)
barplot(mean_weight$weight)
barplot(mean_weight$weight,
col = c("red", "green", "blue", "yellow"))
barplot(mean_weight$weight,
col = c("red", "green", "blue", "yellow"),
horiz = TRUE)
data("PlantGrowth")
force(PlantGrowth)
View(PlantGrowth)
counts <- table(PlantGrowth$group)
counts
pie(counts)
pie(counts)
data("airquality")
boxplot(airquality$Ozone)
View(airquality)
boxplot(airquality$Ozone ~ airquality$Month)
boxplot(airquality$Ozone ~ airquality$Month)
boxplot(airquality$Ozone ~ airquality$Month)
boxplot(airquality$Wind ~ airquality$Month)
data(quakes)
force(quakes)
View(quakes)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = (quakes$mag^3)/50)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2))
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = (quakes$mag^3)/50)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^2/100)
source("~/GitHub/NASTAVA/Untitled.R", echo=TRUE)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^2/50)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^4/50)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^4/200)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^10/2000)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^10/2000)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^10/3000)
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = quakes$mag^10/30000)
3
plot(quakes$long, quakes$lat,
main = "Lokacije potresa",
xlab = "Geografska dužina",
ylab = "Geografska širina",
pch = 21,
col = rgb(0,0.2,0.4,0.75),
bg = rgb(0,0.4,0.8,0.2),
cex = (quakes$mag^3)/50)
intensity_col <- rev(heat.colors(10))[cut(quakes$mag, breaks=10)]
plot(quakes$depth, quakes$stations, col=intensity_col, pch=19, main="Boje po
magnitudi")
plot(quakes$depth, quakes$stations, col=intensity_col, pch=19, main="Boje po
magnitudi")
pairs(quakes)
pairs(quakes,
bg = adjustcolor("blue", alpha.f = 0.3),
col = adjustcolor("darkblue", alpha.f = 0.5)))
pairs(quakes,
bg = adjustcolor("blue", alpha.f = 0.3),
col = adjustcolor("darkblue", alpha.f = 0.5))
cor(quakes)
install.packages(c("ggplot2", "forecast"))
library(ggplot2)    # Za naprednu vizualizaciju
library(forecast)   # Za autoplot() specifično za vremenske nizove
podaci <- c(23,45,67,34,56,78,89,45,67,89,43,56,
34,67,89,54,76,88,91,52,71,85,49,63)
vremenski_niz <- ts(podaci, start = c(2020, 1), frequency = 12)
vremenski_niz
# čišćenje od nedostajućih vrijednosti i outliera
vremenski_niz <- tsclean(vremenski_niz)
# Učitavanje ugrađenog dataseta
data("AirPassengers")
vremenski_niz <- AirPassengers
vremenski_niz
# Grafički prikaz trenda
plot(vremenski_niz, ylab="Broj putnika")
abline(lm(vremenski_niz ~ time(vremenski_niz)), col = "red")
# Prikaz originalnih podataka
plot(AirPassengers,
main = "Broj međunarodnih putnika (1949-1960)",
ylab = "Broj putnika (u tisućama)",
xlab = "Godina")
# Dekompozicija niza na komponente
dekompozicija <- decompose(AirPassengers)
# Vizualizacija dekompozicije
plot(dekompozicija)
# Primjer STL dekompozicije
stl_dekomp <- stl(AirPassengers, s.window = "periodic")
# Vizualizacija
plot(stl_dekomp, main = "STL dekompozicija AirPassengers dataseta")
library(tseries)
data("AirPassengers")
vremenski_niz <- AirPassengers
adf_test <- adf.test(vremenski_niz)
adf_test
diferencirani_niz <- diff(vremenski_niz, 1)
adf.test(diferencirani_niz)
diferencirani_niz <- diff(vremenski_niz, 2)
adf.test(diferencirani_niz)
num_diffs <- ndiffs(ap)
num_diffs  # Vraća broj potrebnih diferencijacija za stacionarnost, 1 u ovom slučaju
num_diffs <- ndiffs(vremenski_niz)
num_diffs  # Vraća broj potrebnih diferencijacija za stacionarnost, 1 u ovom slučaju
ap <- AirPassengers
ap_arima <- auto.arima(ap)
summary(ap_arima)
ap <- AirPassengers
ap_arima <- auto.arima(ap)
summary(ap_arima)
ap_forecast_arima <- forecast(ap_arima, h = 36)
autoplot(ap_forecast_arima) +
ggtitle("ARIMA predikcija broja putnika") +
xlab("Godina") + ylab("Broj putnika")
setwd("~/GitHub/FIPU-APOI/Skripte/Skripta 3. - Korelacija i regresija, vremenski nizovi, klasifikacija i grupacija/Primjeri/zadatak 3")
# 1. Učitajte podatke iz datoteke „day.csv“ u data frame naziva bike uz postavku da se ne izvrši
# automatsko pretvaranje znakovnih nizova u „factor“.
bike <- read.csv("day.csv", stringsAsFactors = FALSE)
str(bike)
# 2. Pretvorite dteday u datum formata „godina-mjesec-dan“.
bike$dteday <- as.Date(bike$dteday, format = "%Y-%m-%d")
str(bike)
# 3. Pomoću linijskog grafikona prikažite broj posudbi (cnt) prema danima (dteday).
plot(bike$dteday, bike$cnt, type = "l")
# 4. Na koji je datum bilo najviše, a na koji najmanje posudbi?
bike[which.max(bike$cnt), c("dteday", "cnt")] #2012-09-15, 8714
bike[which.min(bike$cnt), c("dteday", "cnt")] #22, outlier
# 5. Pretvorite cnt u vremenski niz te ga očistite od nedostajućih vrijednosti i outliera (ako ih ima).
# Podatke spremite u varijablu cnt.clean.
# install.packages("forecast")
library("forecast")
# 1. Učitajte podatke iz datoteke „day.csv“ u data frame naziva bike uz postavku da se ne izvrši
# automatsko pretvaranje znakovnih nizova u „factor“.
bike <- read.csv("day.csv", stringsAsFactors = FALSE)
str(bike)
# 2. Pretvorite dteday u datum formata „godina-mjesec-dan“.
bike$dteday <- as.Date(bike$dteday, format = "%Y-%m-%d")
str(bike)
# 3. Pomoću linijskog grafikona prikažite broj posudbi (cnt) prema danima (dteday).
plot(bike$dteday, bike$cnt, type = "l")
# 4. Na koji je datum bilo najviše, a na koji najmanje posudbi?
bike[which.max(bike$cnt), c("dteday", "cnt")] #2012-09-15, 8714
bike[which.min(bike$cnt), c("dteday", "cnt")] #22, outlier
# 4. Na koji je datum bilo najviše, a na koji najmanje posudbi?
bike[max(bike$cnt), c("dteday", "cnt")] #2012-09-15, 8714
bike[min(bike$cnt), c("dteday", "cnt")] #22, outlier
# 4. Na koji je datum bilo najviše, a na koji najmanje posudbi?
bike[max(bike$cnt)==bike$cnt, c("dteday", "cnt")] #2012-09-15, 8714
bike[min(bike$cnt)==bike$cnt, c("dteday", "cnt")] #22, outlier
# 5. Pretvorite cnt u vremenski niz te ga očistite od nedostajućih vrijednosti i outliera (ako ih ima).
# Podatke spremite u varijablu cnt.clean.
# install.packages("forecast")
library("forecast")
# pretvaranje u vremenski niz
cnt.ts <- ts(bike[, c("cnt")], frequency = 365)
# ciscenje
bike$cnt.clean <- tsclean(cnt.ts)
# pretvaranje u vremenski niz
cnt.ts <- ts(bike[, c("cnt")], frequency = 365)
# ciscenje
bike$cnt.clean <- tsclean(cnt.ts)
# 6. Usporedite grafički originalni niz i očišćeni niz (cnt.clean).
par(mfrow=c(1,2))
plot(bike$dteday, bike$cnt, type = "l")
plot(bike$dteday, bike$cnt.clean, type = "l")
# 7. Napravite 3 nova niza tako da cnt.clean zagladite pomoću pomičnih prosjeka reda 7, 15 i 30.
bike$cnt.ma7 <- ma(bike$cnt.clean, order = 7)
bike$cnt.ma15 <- ma(bike$cnt.clean, order = 15)
bike$cnt.ma30 <- ma(bike$cnt.clean, order = 30)
# 8. Prikažite grafički cnt.clean i nizove pomičnih prosjeka.
par(mfrow=c(2,2))
plot(bike$dteday, bike$cnt, type = "l", main = "Originalni")
plot(bike$dteday, bike$cnt.ma7, type = "l", main = "MA (7)")
plot(bike$dteday, bike$cnt.ma15, type = "l", main = "MA (15)")
plot(bike$dteday, bike$cnt.ma30, type = "l", main = "MA (30)")
# 6. Usporedite grafički originalni niz i očišćeni niz (cnt.clean).
par(mfrow=c(1,2))
plot(bike$dteday, bike$cnt, type = "l")
plot(bike$dteday, bike$cnt.clean, type = "l")
plot(bike$dteday, bike$cnt, type = "l")
plot(bike$dteday, bike$cnt.clean, type = "l")
par(mfrow=c(1,2))
plot(bike$dteday, bike$cnt, type = "l")
plot(bike$dteday, bike$cnt.clean, type = "l")
# 7. Napravite 3 nova niza tako da cnt.clean zagladite pomoću pomičnih prosjeka reda 7, 15 i 30.
bike$cnt.ma7 <- ma(bike$cnt.clean, order = 7)
bike$cnt.ma15 <- ma(bike$cnt.clean, order = 15)
bike$cnt.ma30 <- ma(bike$cnt.clean, order = 30)
# 8. Prikažite grafički cnt.clean i nizove pomičnih prosjeka.
par(mfrow=c(2,2))
plot(bike$dteday, bike$cnt, type = "l", main = "Originalni")
plot(bike$dteday, bike$cnt.ma7, type = "l", main = "MA (7)")
plot(bike$dteday, bike$cnt.ma15, type = "l", main = "MA (15)")
plot(bike$dteday, bike$cnt.ma30, type = "l", main = "MA (30)")
# 9. Izvršite aditivnu dekompoziciju vremenskog niza. Za koliko se promijenio broj posudbi zbog
# sezonskog utjecaja na dan 6.1.2011.?
dekomp <- stl(bike$cnt.clean, s.window = "periodic")
idx <- which(bike$dteday == "2011-01-06")
dekomp$time.series[idx,]
# 1. Učitajte podatke iz datoteke „day.csv“ u data frame naziva bike uz postavku da se ne izvrši
# automatsko pretvaranje znakovnih nizova u „factor“.
bike <- read.csv("day.csv", stringsAsFactors = FALSE)
str(bike)
# 2. Pretvorite dteday u datum formata „godina-mjesec-dan“.
bike$dteday <- as.Date(bike$dteday, format = "%Y-%m-%d")
str(bike)
# 3. Pomoću linijskog grafikona prikažite broj posudbi (cnt) prema danima (dteday).
plot(bike$dteday, bike$cnt, type = "l")
# 4. Na koji je datum bilo najviše, a na koji najmanje posudbi?
bike[which.max(bike$cnt), c("dteday", "cnt")] #2012-09-15, 8714
# najvise posudbi (8714) bilo je 15.9.2012.
bike[which.min(bike$cnt), c("dteday", "cnt")] #22, outlier
# najmanje posudbi (22) bilo je 29.10.2012.
# 5. Pretvorite cnt u vremenski niz te ga očistite od nedostajućih vrijednosti i outliera (ako ih ima).
# Podatke spremite u varijablu cnt.clean.
# install.packages("forecast")
library("forecast")
# pretvaranje u vremenski niz
cnt.ts <- ts(bike[, c("cnt")], frequency = 365)
# ciscenje
bike$cnt.clean <- tsclean(cnt.ts)
# 6. Usporedite grafički originalni niz i očišćeni niz (cnt.clean).
par(mfrow=c(1,2))
plot(bike$dteday, bike$cnt, type = "l")
plot(bike$dteday, bike$cnt.clean, type = "l")
# 7. Napravite 3 nova niza tako da cnt.clean zagladite pomoću pomičnih prosjeka reda 7, 15 i 30.
bike$cnt.ma7 <- ma(bike$cnt.clean, order = 7)
bike$cnt.ma15 <- ma(bike$cnt.clean, order = 15)
bike$cnt.ma30 <- ma(bike$cnt.clean, order = 30)
# 8. Prikažite grafički cnt.clean i nizove pomičnih prosjeka.
par(mfrow=c(2,2))
plot(bike$dteday, bike$cnt, type = "l", main = "Originalni")
plot(bike$dteday, bike$cnt.ma7, type = "l", main = "MA (7)")
plot(bike$dteday, bike$cnt.ma15, type = "l", main = "MA (15)")
plot(bike$dteday, bike$cnt.ma30, type = "l", main = "MA (30)")
# 9. Izvršite aditivnu dekompoziciju vremenskog niza. Za koliko se promijenio broj posudbi zbog
# sezonskog utjecaja na dan 6.1.2011.?
dekomp <- stl(bike$cnt.clean, s.window = "periodic")
idx <- which(bike$dteday == "2011-01-06")
dekomp$time.series[idx,]
1008.54512 - 50.98455
1008.54 - 50.98
# logaritmiranje vrijednosti niza
log.bike <- ts(log(bike$cnt), frequency = 365)
# multiplikativna dekompozicija
dekomp.log <- stl(log.bike, s.window = "periodic")
# pronalazenje idneksa trazenog datuma
idx <- which(bike$dteday == "2011-01-01")
dekomp.log$time.series[idx,]
# interpretacija
exp(dekomp.log$time.series[idx,]) # uklanjanje logritma
#0.4899115
1-0.4899115 #0.5100885
# interpretacija
exp(dekomp.log$time.series[idx,]) # uklanjanje logritma
#0.4899115
1-0.4899115 #0.5100885
# pronalazenje idneksa trazenog datuma
idx <- which(bike$dteday == "2011-01-01")
dekomp.log$time.series[idx,]
# interpretacija
exp(dekomp.log$time.series[idx,]) # uklanjanje logritma
#0.4899115
1-0.4899115 #0.5100885
# 11. Prikažite grafički rezultat dekompozicije
plot(dekomp.log)
# 11. Prikažite grafički rezultat dekompozicije
plot(dekomp.log)
# 12. Koristit ćemo zaglađene podatke (reda 7). Uklonite nedostajuće vrijednosti.
sum(is.na(bike$cnt.ma7)) #ima NA na pocetku i kraju niza
ma7 <- na.omit(bike$cnt.ma7)
# 11. Prikažite grafički rezultat dekompozicije
plot(dekomp.log)
# 11. Prikažite grafički rezultat dekompozicije
plot(dekomp.log)
# 12. Koristit ćemo zaglađene podatke (reda 7). Uklonite nedostajuće vrijednosti.
sum(is.na(bike$cnt.ma7)) #ima NA na pocetku i kraju niza
ma7 <- na.omit(bike$cnt.ma7)
# 13. Izvršite provjeru stacionarnosti vremenskog niza. Je li niz stacionaran?
#install.packages("tseries")
library("tseries")
adf.test(ma7)
# 14. Izračunajte prvu diferenciju niza. Ponovite test stacionarnosti. Je li niz stacionaran?
ma7.diff <- diff(ma7, 1)
adf.test(ma7.diff)
# 16. Grafički usporedite nizove prije i nakon diferenciranja.
par(mfrow = c(2,1))
plot(ma7)
plot(ma7.diff)
# autokorelacija
Acf(ma7.diff, lag.max = 30)
# parcijalna autokorelacija
Pacf(ma7.diff, lag.max = 30)
# 18. Napravite ARIMA model koristeći funkciju za automatsko određivanje parametara. Koristite
# prvih 700 vrijednosti zaglađenih podataka bez diferenciranja.
model1 <- auto.arima(ma7[1:700])
# 19. Koje su vrijednosti parametara odabrane?
model1
# 18. Napravite ARIMA model koristeći funkciju za automatsko određivanje parametara. Koristite
# prvih 700 vrijednosti zaglađenih podataka bez diferenciranja.
model1 <- auto.arima(ma7[1:700])
# 19. Koje su vrijednosti parametara odabrane?
model1
# 21. Koliko iznosi RMSE modela?
accuracy(model1)
model2 <- arima(ma7[1:700], order = c(1,1,7))
model2
# 19. Koje su vrijednosti parametara odabrane?
model1
# autokorelacija
Acf(ma7.diff, lag.max = 30)
# parcijalna autokorelacija
Pacf(ma7.diff, lag.max = 30)
# autokorelacija
Acf(ma7.diff)
# autokorelacija
Acf(ma7.diff, lag.max = 30)
# parcijalna autokorelacija
Pacf(ma7.diff, lag.max = 30)
# 19. Koje su vrijednosti parametara odabrane?
model1
# 21. Koliko iznosi RMSE modela?
accuracy(model1)
model2 <- arima(ma7[1:700], order = c(1,1,7))
# autokorelacija
Acf(ma7.diff, lag.max = 30)
# parcijalna autokorelacija
Pacf(ma7.diff, lag.max = 30)
Acf(ma7.diff, lag.max = 30)
# 1,2,7
# parcijalna autokorelacija
Pacf(ma7.diff, lag.max = 30)
f1 <- forecast(model1, h = 7)
f2 <- forecast(model2, h = 7)
#par(mfrow = c(2,1))
par(mfrow = c(1,1))
plot(f1)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f2)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
f1 <- forecast(model1, h = 7)
f2 <- forecast(model2, h = 7)
par(mfrow = c(2,1))
plot(f1)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f2)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
f1 <- forecast(model1, h = 7)
plot(f1)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
f1 <- forecast(model1, h = 7)
plot(f1)
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(600, 700))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(690, 710))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1)
plot(f1, xlim=c(690, 710), ylim=c(3000, 7000))
y <- ma7[701:707]
x <- 701:707
plot(f1, xlim=c(690, 710), ylim=c(1000, 7000))
y <- ma7[701:707]
x <- 701:707
3
plot(f1, xlim=c(650, 707), ylim=c(3000, 7000))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(650, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(500, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(650, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(600, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(300, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(400, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(600, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
plot(f1, xlim=c(650, 707))
y <- ma7[701:707]
x <- 701:707
points(x, y, col = "red", pch = 16)
